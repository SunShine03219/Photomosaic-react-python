{"version":3,"sources":["components/spinner.gif","components/demo.gif","components/Navbar.js","components/ErrorMessage.js","components/ImagePreview.js","components/Spinner.js","settings.js","components/GrabFromInternet.js","components/ProgressBar.js","components/UploadMyOwn.js","components/SourceImages.js","components/LandingPage.js","components/Timer.js","components/TileArt.js","components/MainController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","ErrorMessage","error","ImagePreview","imageUrls","setFiles","files","map","imageUrl","index","key","effect","src","width","height","href","onClick","filter","_","id","removeFile","Spinner","spinner","alt","style","margin","display","ACCEPTED_EXTENSIONS","GrabFromInternet","incrementStep","setDirname","useState","searchText","setSearchText","setError","loading","setLoading","images","setImages","count","setCount","validate_upload","err","length","setTimeout","loadImages","a","data","FormData","append","fetch","method","body","res","json","search_data","newImages","search_results","prevCount","upload","join","_res","abort","dirname","sessionStorage","setItem","type","placeholder","value","onChange","e","target","readOnly","Math","min","ProgressBar","filesUploaded","totalFiles","max","round","UploadMyOwn","showProgressBar","setShowProgressBar","setFilesUploaded","total_file_size","forEach","file","size","onSubmit","preventDefault","uuidv4","i","split","d","prevNum","URL","createObjectURL","htmlFor","aria-describedby","newFiles","ext","multiple","SourceImages","useScrollPosition","prevPos","currPos","y","x","window","scrollTo","abs","data-toggle","LandingPage","setCurrentStep","demo","Timer","date","Date","now","intervalDelay","precision","renderer","minutes","seconds","milliseconds","completed","then","removeItem","toString","padStart","substring","TileArt","fileName","setFileName","setFile","progress","setProgress","squareSize","setSquareSize","resByte","setResByte","getHeightAndWidthFromDataUrl","dataURL","Promise","resolve","img","Image","onload","validateInput","handleUpload","request","XMLHttpRequest","open","addEventListener","percent_completed","loaded","total","JSON","parse","response","send","Array","keys","num","_file","name","download","MainController","currentComponent","currentStep","callAbort","getItem","navigator","sendBeacon","beforeAbort","returnValue","useEffect","prevStep","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.32a38c4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.dde328da.gif\";","module.exports = __webpack_public_path__ + \"static/media/demo.c4e8835e.gif\";","import React from \"react\";\n\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n      <strong className=\"navbar-brand\">PHOTOMOSAIC</strong>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\nfunction ErrorMessage({ error }) {\n  return error !== \"\" ? (\n    <div className=\"alert alert-danger mt-3 mb-3\">\n      <strong>{error}</strong>\n    </div>\n  ) : null;\n}\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\n\nfunction ImagePreview({ imageUrls, setFiles, files }) {\n  const removeFile = (index) => setFiles(files.filter((_, id) => id !== index));\n\n  return (\n    <div className=\"form-group multi-preview mt-5\">\n      <div className=\"ccontainer\">\n        {imageUrls.map((imageUrl, index) => (\n          <div key={index} className=\"ccc\">\n            <LazyLoadImage\n              effect=\"blur\"\n              src={imageUrl}\n              width=\"150px\"\n              height=\"150px\"\n            />\n\n            <a href=\"/#\" onClick={() => removeFile(index)}>\n              <i className=\"fas fa-window-close\" />\n            </a>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ImagePreview;\n","import React from \"react\";\nimport spinner from \"./spinner.gif\";\n\nexport default function Spinner() {\n  return (\n    <div>\n      <img\n        src={spinner}\n        alt=\"Loading...\"\n        style={{ width: \"200px\", margin: \"auto\", display: \"block\" }}\n      />\n    </div>\n  );\n}\n","export const FILE_UPLOAD_SIZE_LIMIT = 30;\nexport const SOURCE_UPLOAD_SIZE_LIMIT = 3;\nexport const MAX_NUMBER_OF_FILES_TO_UPLOAD = 50;\nexport const MIN_NUMBER_OF_FILES_TO_UPLOAD = 30;\nexport const ACCEPTED_EXTENSIONS = [\"png\", \"jpeg\", \"jpg\"];\n","import React, { useEffect, useState } from \"react\";\n\nimport ErrorMessage from \"./ErrorMessage\";\nimport ImagePreview from \"./ImagePreview\";\nimport Spinner from \"./Spinner\";\n\nimport {\n  MAX_NUMBER_OF_FILES_TO_UPLOAD,\n  MIN_NUMBER_OF_FILES_TO_UPLOAD,\n} from \"../settings\";\n\nfunction GrabFromInternet({ incrementStep, setDirname }) {\n  const [searchText, setSearchText] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [images, setImages] = useState([]);\n  const [count, setCount] = useState(0);\n\n  const validate_upload = () => {\n    let err = \"\";\n    let validate_upload = true;\n    if (images.length < MIN_NUMBER_OF_FILES_TO_UPLOAD) {\n      err = `Please make sure the number of files uploaded is between ${MIN_NUMBER_OF_FILES_TO_UPLOAD} and ${MAX_NUMBER_OF_FILES_TO_UPLOAD}`;\n      validate_upload = false;\n    }\n    if (!validate_upload) {\n      setError(err);\n      setTimeout(() => setError(\"\"), 3000);\n      return false;\n    }\n\n    return true;\n  };\n\n  // useEffect(() => {\n  //   socket.on(\"disconnect\", () => {\n  //     setLoading(false);\n\n  //     setError(\"Connection to server lost :( Please Try again\");\n  //     setTimeout(() => setError(\"\"), 3000);\n  //   });\n  // }, [socket]);\n\n  const loadImages = async () => {\n    if (searchText === \"\") {\n      setError(\"Search cannot empty\");\n      setTimeout(() => setError(\"\"), 3000);\n      return;\n    }\n\n    const data = new FormData();\n\n    data.append(\"searchText\", searchText);\n    data.append(\"count\", count);\n\n    setLoading(true);\n\n    const res = await fetch(\"/api/search\", {\n      method: \"POST\",\n      body: data,\n    });\n\n    const search_data = await res.json();\n\n    const newImages = [...search_data.search_results, ...images];\n\n    // console.log(newImages);\n    setImages(newImages);\n\n    if (search_data.search_results > 0) setCount((prevCount) => prevCount + 1);\n\n    setLoading(false);\n  };\n\n  const upload = async () => {\n    if (!validate_upload()) return;\n\n    setLoading(true);\n\n    const data = new FormData();\n\n    data.append(\"image_urls\", images.join(\" \"));\n\n    const _res = await fetch(\"/api/grab\", {\n      method: \"POST\",\n      body: data,\n    });\n\n    const res = await _res.json();\n\n    setLoading(false);\n\n    const { abort, dirname } = res;\n\n    if (abort) {\n      setError(\"Error in server :( Please Try again\");\n      setTimeout(() => setError(\"\"), 3000);\n    } else {\n      setImages([]);\n      setSearchText(\"\");\n      setCount(0);\n      setError(\"\");\n      setDirname(dirname);\n      sessionStorage.setItem(\"dirname\", dirname);\n      incrementStep();\n    }\n  };\n\n  // const upload = () => {\n  //   if (!validate_upload()) return;\n\n  //   setLoading(true);\n\n  //   socket.emit(\"download_images\", images.join(\" \"), ({ abort, dirname }) => {\n  //     setLoading(false);\n\n  //     if (abort) {\n  //       setError(\"Error in server :( Please Try again\");\n  //       setTimeout(() => setError(\"\"), 3000);\n  //     } else {\n  //       setImages([]);\n  //       setSearchText(\"\");\n  //       setCount(0);\n  //       setError(\"\");\n  //       setDirname(dirname);\n  //       sessionStorage.setItem(\"dirname\", dirname);\n  //       incrementStep();\n  //     }\n  //   });\n  // };\n\n  const onChange = (e) => setSearchText(e.target.value);\n\n  if (loading) return <Spinner />;\n\n  return (\n    <div className=\"tab-pane fade active show\" id=\"grabFromInternet\">\n      <h6>\n        Grab the smaller image set from the internet. Make sure you select\n        atleast 30 images. The top 50 images will be used for making the mosaic.\n        Try to pic images with different color distributions for more better\n        results. NOTE: The quality of the generated mosaic will largely depend\n        on smaller image set and the target image. You might have to try a few\n        times before you can get it right :)\n      </h6>\n\n      <div className=\"form-group mt-5\">\n        <div className=\"input-group mb-5\">\n          <input\n            className=\"form-control form-control-lg\"\n            type=\"text\"\n            placeholder=\"Search the internet Eg: Jemma Simmons\"\n            id=\"inputLarge\"\n            value={searchText}\n            onChange={onChange}\n            readOnly={images.length > 0}\n          />\n          {images.length === 0 && (\n            <div className=\"input-group-append\">\n              <button\n                onClick={loadImages}\n                className=\"input-group-text btn-primary\"\n              >\n                Search\n              </button>\n            </div>\n          )}\n        </div>\n\n        {images.length > 0 && (\n          <>\n            <button\n              type=\"button\"\n              onClick={upload}\n              className=\"btn btn-primary btn-lg btn-block\"\n            >\n              Grab\n            </button>\n            <button\n              type=\"button\"\n              onClick={loadImages}\n              className=\"btn btn-primary btn-lg btn-block mb-5\"\n            >\n              Load More\n            </button>\n\n            <h4 className=\"mt-2\">\n              Number of images selected : {Math.min(50, images.length)}\n            </h4>\n          </>\n        )}\n        <ErrorMessage className=\"mb-2 mt-1\" error={error} />\n\n        <ImagePreview imageUrls={images} setFiles={setImages} files={images} />\n      </div>\n    </div>\n  );\n}\n\nexport default GrabFromInternet;\n","import React from \"react\";\n\nfunction ProgressBar({ filesUploaded, totalFiles }) {\n  return (\n    <>\n      <h3 className=\"text-center\">\n        Files uploaded {filesUploaded}/{totalFiles}\n      </h3>\n      <div className=\"progress\">\n        <progress\n          style={{ width: \"100%\" }}\n          max=\"100\"\n          value={Math.round((filesUploaded / totalFiles) * 100) || 0}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default ProgressBar;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport ProgressBar from \"./ProgressBar\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport ImagePreview from \"./ImagePreview\";\n\nimport {\n  ACCEPTED_EXTENSIONS,\n  FILE_UPLOAD_SIZE_LIMIT,\n  MAX_NUMBER_OF_FILES_TO_UPLOAD,\n  MIN_NUMBER_OF_FILES_TO_UPLOAD,\n} from \"../settings\";\n\nfunction UploadMyOwn({ incrementStep, setDirname }) {\n  const [files, setFiles] = useState([]);\n  const [showProgressBar, setShowProgressBar] = useState(false);\n  const [filesUploaded, setFilesUploaded] = useState(0);\n  const [error, setError] = useState(\"\");\n\n  const validate_upload = () => {\n    let total_file_size = 0;\n    let validate_upload = true;\n    files.forEach((file) => (total_file_size += file.size / 1024 / 1024));\n    let err;\n    if (total_file_size > FILE_UPLOAD_SIZE_LIMIT) {\n      err = `Total file size has exceeded, Max upload limit is ${FILE_UPLOAD_SIZE_LIMIT}MB`;\n\n      validate_upload = false;\n    } else if (\n      files.length < MIN_NUMBER_OF_FILES_TO_UPLOAD ||\n      files.length > MAX_NUMBER_OF_FILES_TO_UPLOAD\n    ) {\n      err = `Please make sure the number of files uploaded is between ${MIN_NUMBER_OF_FILES_TO_UPLOAD} and ${MAX_NUMBER_OF_FILES_TO_UPLOAD}`;\n\n      validate_upload = false;\n    }\n\n    if (!validate_upload) {\n      setError(err);\n      setTimeout(() => setError(\"\"), 3000);\n      return false;\n    }\n\n    return true;\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (!validate_upload()) return;\n\n    const dirname = uuidv4();\n    setShowProgressBar(true);\n    for (let i = 0; i < files.length; i++) {\n      const data = new FormData();\n      data.append(\"file\", files[i]);\n      data.append(\"extension\", files[i].type.split(\"/\")[1]);\n      data.append(\"filename\", uuidv4());\n      data.append(\"dirname\", dirname);\n\n      const res = await fetch(\"api/upload\", {\n        method: \"POST\",\n        body: data,\n      });\n\n      const json_res = await res.json();\n\n      if (json_res.abort) {\n        const d = new FormData();\n        d.append(\"dirname\", dirname);\n        await fetch(\"api/delete\", {\n          method: \"POST\",\n          body: d,\n        });\n        setError(\"Error in server :( Please Try again\");\n        setTimeout(() => setError(\"\"), 3000);\n        setFiles([]);\n        setFilesUploaded(0);\n        break;\n      }\n      setFilesUploaded((prevNum) => prevNum + 1);\n    }\n\n    if (files.length > 0) {\n      setDirname(dirname);\n      incrementStep();\n      setShowProgressBar(false);\n      sessionStorage.setItem(\"dirname\", dirname);\n      setFiles([]);\n      setFilesUploaded(0);\n      setError(\"\");\n    }\n    setShowProgressBar(false);\n  };\n\n  const onFileUploadChange = (e) => {\n    const newFiles = [\n      ...files,\n      ...[...e.target.files].filter(\n        (file) =>\n          file.type.split(\"/\")[0] === \"image\" &&\n          ACCEPTED_EXTENSIONS.filter((ext) => ext === file.type.split(\"/\")[1])\n            .length > 0\n      ),\n    ];\n\n    //  FOR TESTING\n    // const newFiles = [...files, ...[...e.target.files]];\n    setFiles(newFiles);\n  };\n\n  if (showProgressBar)\n    return (\n      <ProgressBar totalFiles={files.length} filesUploaded={filesUploaded} />\n    );\n\n  const imageUrls = files.map((file) => URL.createObjectURL(file));\n\n  return (\n    <div className=\"tab-pane fade\" id=\"uploadMyOwn\">\n      <h6>\n        Choose the smaller set of images that you want to make the mosaic from.\n        Make sure that the selected image files are less than 2MB in size and\n        the entire set is less than or equal to 30MB. The allowed extensions are\n        jpeg and png. You can select a maximum of 50 images and a minimum of 30\n        images. NOTE: The quality of the generated mosaic will largely depend on\n        smaller image set and the target image. You might have to try a few\n        times before you can get it right :)\n      </h6>\n\n      <ImagePreview imageUrls={imageUrls} setFiles={setFiles} files={files} />\n\n      <form onSubmit={onSubmit}>\n        <fieldset>\n          <div className=\"form-group\">\n            <label htmlFor=\"InputFile\">File input</label>\n            <input\n              type=\"file\"\n              className=\"form-control-file\"\n              id=\"InputFile\"\n              aria-describedby=\"fileHelp\"\n              onChange={onFileUploadChange}\n              multiple\n            />\n\n            <ErrorMessage error={error} />\n          </div>\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </fieldset>\n      </form>\n    </div>\n  );\n}\n\nexport default UploadMyOwn;\n","import React from \"react\";\nimport GrabFromInternet from \"./GrabFromInternet\";\n\nimport UploadMyOwn from \"./UploadMyOwn\";\n\nimport { useScrollPosition } from \"@n8tb1t/use-scroll-position\";\n\nfunction SourceImages({ incrementStep, setDirname }) {\n  useScrollPosition(({ prevPos, currPos }) => {\n    if (prevPos.y < 0 && currPos.x === 0 && currPos.y === 0)\n      window.scrollTo(prevPos.x, Math.abs(prevPos.y));\n  });\n  return (\n    <>\n      <ul className=\"nav nav-tabs list-inline\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" data-toggle=\"tab\" href=\"#uploadMyOwn\">\n            Upload My Own\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className=\"nav-link active\"\n            data-toggle=\"tab\"\n            href=\"#grabFromInternet\"\n          >\n            Grab from the internet\n          </a>\n        </li>\n      </ul>\n      <div id=\"myTabContent\" className=\"tab-content\">\n        <UploadMyOwn incrementStep={incrementStep} setDirname={setDirname} />\n        <GrabFromInternet\n          incrementStep={incrementStep}\n          setDirname={setDirname}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default SourceImages;\n","import React from \"react\";\nimport demo from \"./demo.gif\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\n\nfunction LandingPage({ setCurrentStep }) {\n  return (\n    <div className=\"container text-center\">\n      <h5 className=\"mt-3\">\n        In the field of photographic imaging, a photographic mosaic, also known\n        under the term Photomosaic, is a picture that has been divided into\n        tiled sections, each of which is replaced with another photograph that\n        matches the target photo. Here's an example\n      </h5>\n\n      <LazyLoadImage\n        effect=\"blur\"\n        src={demo}\n        id=\"landing-gif\"\n        className=\"mt-5\"\n      />\n\n      <button\n        onClick={() => setCurrentStep(2)}\n        type=\"button\"\n        className=\"btn btn-primary btn-lg btn-block mt-5\"\n      >\n        Make Mosaic with test Flower image set\n      </button>\n      <button\n        onClick={() => setCurrentStep(1)}\n        type=\"button\"\n        className=\"btn btn-primary btn-lg btn-block\"\n      >\n        Make Mosaic with your own custom image set\n      </button>\n    </div>\n  );\n}\n\nexport default LandingPage;\n","import React from \"react\";\nimport Countdown from \"react-countdown\";\n\nfunction Timer({ dirname, setDirname, setCurrentStep }) {\n  const renderer = ({ minutes, seconds, milliseconds, completed }) => {\n    if (completed) {\n      const data = new FormData();\n      data.append(\"dirname\", dirname);\n      fetch(\"/api/delete\", {\n        method: \"POST\",\n        body: data,\n      }).then((_res) => {\n        setDirname(\"test\");\n        setCurrentStep(1);\n        sessionStorage.removeItem(\"dirname\");\n      });\n      return <h1>Time Over!</h1>;\n    } else {\n      return (\n        <div className=\"row text-center timer-row\">\n          <div className=\"col-md-12\">\n            <span className=\"timer \">\n              {minutes.toString().padStart(2, \"0\")}:\n              {seconds.toString().padStart(2, \"0\")}:\n              {milliseconds.toString().substring(0, 2)}\n            </span>\n          </div>\n        </div>\n      );\n    }\n  };\n  return (\n    <Countdown\n      date={Date.now() + 1000 * 60 * 15}\n      intervalDelay={2}\n      precision={2}\n      renderer={renderer}\n    />\n  );\n}\n\nexport default Timer;\n","import React, { useState } from \"react\";\nimport ErrorMessage from \"./ErrorMessage\";\n\nimport Spinner from \"./Spinner\";\n\nimport { ACCEPTED_EXTENSIONS, SOURCE_UPLOAD_SIZE_LIMIT } from \"../settings\";\n\nfunction TileArt({ dirname, setDirname, setCurrentStep }) {\n  const [fileName, setFileName] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [squareSize, setSquareSize] = useState(30);\n  const [loading, setLoading] = useState(false);\n  const [resByte, setResByte] = useState(\"\");\n\n  const getHeightAndWidthFromDataUrl = (dataURL) =>\n    new Promise((resolve) => {\n      const img = new Image();\n      img.onload = () => {\n        resolve({\n          height: img.height,\n          width: img.width,\n        });\n      };\n      img.src = dataURL;\n    });\n\n  const validateInput = async () => {\n    let err = \"\";\n    const { height, width } = await getHeightAndWidthFromDataUrl(\n      URL.createObjectURL(file)\n    );\n    if (!file) err = \"Please choose a file to upload\";\n    else if (\n      file.type.split(\"/\")[0] !== \"image\" ||\n      ACCEPTED_EXTENSIONS.filter((ext) => ext === file.type.split(\"/\")[1])\n        .length === 0\n    )\n      err = `Please select an image which is of format ${ACCEPTED_EXTENSIONS.join(\n        \", \"\n      )}`;\n    else if (file.size / 1024 / 1024 > SOURCE_UPLOAD_SIZE_LIMIT)\n      err = \"Please select a file less than 3mb\";\n    else if (height < 600 || width < 600)\n      err = \"Please select an image with size atleast 600x600 px\";\n\n    if (err !== \"\") {\n      setError(err);\n      setTimeout(() => setError(\"\"), 3000);\n      return false;\n    }\n    return true;\n  };\n\n  const handleUpload = async () => {\n    if (await validateInput()) {\n      const data = new FormData();\n\n      data.append(\"file\", file);\n      data.append(\"dirname\", dirname);\n      data.append(\"squareSize\", squareSize);\n\n      const request = new XMLHttpRequest();\n      request.open(\"POST\", \"/api/tile\");\n\n      request.upload.addEventListener(\"progress\", function (e) {\n        let percent_completed = (e.loaded / e.total) * 100;\n\n        setProgress(percent_completed);\n      });\n\n      request.addEventListener(\"load\", function (e) {\n        setTimeout(() => {\n          setProgress(0);\n          setLoading(false);\n          const res = JSON.parse(request.response);\n\n          if (res.abort) {\n            setDirname(\"test\");\n            setCurrentStep(1);\n            sessionStorage.removeItem(\"dirname\");\n          } else if (res.error) {\n            setError(request.response.error);\n            setTimeout(() => setError(\"\"), 3000);\n          } else {\n            setResByte(`data:${file.type};base64,${res.img}`);\n          }\n        }, 500);\n      });\n\n      setLoading(true);\n      request.send(data);\n    }\n  };\n\n  const handleFileChange = (e) => {\n    if (e.target.files.length > 0) {\n      const _file = e.target.files[0];\n      setFileName(_file.name);\n      setFile(_file);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h6 className=\"mt-3\">\n        You have 15 minutes to make a mosaic with whatever image you want. Make\n        sure the image you select is atleast 600x600px big for better results.\n        The allowed extensions are jpeg and png. NOTE: The quality of the\n        generated mosaic will largely depend on smaller image set and the target\n        image. You might have to try a few times before you can get it right :)\n      </h6>\n\n      {loading ? (\n        <Spinner />\n      ) : (\n        <>\n          <div className=\"mt-3 form-inline\">\n            <label htmlFor=\"exampleFormControlSelect1\">\n              <strong>Square size</strong>\n            </label>\n            <select\n              className=\"form-control square-size-select m-2\"\n              id=\"exampleFormControlSelect1\"\n              onChange={(e) => setSquareSize(e.target.value)}\n              value={squareSize}\n            >\n              {[...Array(11).keys()].map((num, index) => (\n                <option key={index}>{20 + num}</option>\n              ))}\n            </select>\n          </div>\n          <div className=\"input-group mt-3\">\n            <div className=\"custom-file\">\n              <input\n                type=\"file\"\n                className=\"custom-file-input\"\n                id=\"inputGroupFile04\"\n                aria-describedby=\"inputGroupFileAddon04\"\n                onChange={handleFileChange}\n              />\n              <label className=\"custom-file-label\" htmlFor=\"inputGroupFile04\">\n                {fileName === \"\" ? \"Choose file\" : fileName}\n              </label>\n            </div>\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-secondary\"\n                type=\"button\"\n                id=\"inputGroupFileAddon04\"\n                onClick={handleUpload}\n              >\n                upload\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n\n      <ErrorMessage error={error} />\n\n      {progress > 0 && (\n        <>\n          <h5 className=\"mt-4 text-center\">{`${Math.round(progress)}%`}</h5>\n          <progress\n            className=\"mt-1\"\n            style={{ width: \"100%\" }}\n            max=\"100\"\n            value={Math.round(progress)}\n          />\n        </>\n      )}\n\n      {resByte !== \"\" && (\n        <>\n          <img\n            className=\"mt-3\"\n            src={resByte}\n            width=\"100%\"\n            alt=\"generated mosaic\"\n          />\n          <a\n            download={`tileart.${file.type.split(\"/\")[1]}`}\n            className=\"btn btn-primary btn-lg btn-block mt-2\"\n            href={resByte}\n          >\n            Download\n          </a>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default TileArt;\n","import React, { useState, useEffect } from \"react\";\nimport SourceImages from \"./SourceImages\";\nimport LandingPage from \"./LandingPage\";\n\nimport Timer from \"./Timer\";\n\nimport TileArt from \"./TileArt\";\n\nfunction MainController() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [dirname, setDirname] = useState(\"test\");\n\n  const callAbort = () => {\n    const data = new FormData();\n    data.append(\"dirname\", sessionStorage.getItem(\"dirname\"));\n    navigator.sendBeacon(\"/api/delete\", data);\n    sessionStorage.removeItem(\"dirname\");\n  };\n\n  const beforeAbort = (e) => {\n    e.preventDefault();\n    e.returnValue = \"\";\n    return \"Are you sure you want to leave?\\nAll your progress will be lost\";\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", beforeAbort);\n\n    window.addEventListener(\"unload\", callAbort, false);\n  }, []);\n\n  const incrementStep = () => setCurrentStep((prevStep) => prevStep + 1);\n\n  let currentComponent;\n\n  switch (currentStep) {\n    case 0:\n      currentComponent = <LandingPage setCurrentStep={setCurrentStep} />;\n      break;\n    case 1:\n      currentComponent = (\n        <SourceImages incrementStep={incrementStep} setDirname={setDirname} />\n      );\n      break;\n    case 2:\n      currentComponent = (\n        <>\n          <Timer\n            dirname={dirname}\n            setDirname={setDirname}\n            setCurrentStep={setCurrentStep}\n          />\n          <TileArt\n            dirname={dirname}\n            setDirname={setDirname}\n            setCurrentStep={setCurrentStep}\n          />\n        </>\n      );\n      break;\n    default:\n      currentComponent = <h1>404 Page Not found..., Please reload</h1>;\n  }\n\n  return <div className=\"container\">{currentComponent}</div>;\n}\n\nexport default MainController;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Navbar from \"./components/Navbar\";\nimport MainController from \"./components/MainController\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <MainController />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}